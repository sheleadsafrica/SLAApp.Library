/* tslint:disable */
/* eslint-disable */
/**
 * She Leads Africa API
 * She Leads Africa API. Combined endpoint of all services provided.
 *
 * OpenAPI spec version: v0
 * Contact: olpie101@github.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AnnouncementsResponse } from '../models';
import { BlogPostsFullResponse } from '../models';
import { FAQsResponse } from '../models';
import { FinanceDictionaryEntriesResponse } from '../models';
import { LegalDocumentsResponse } from '../models';
import { MoneyTipsForYearResponse } from '../models';
import { WebinarPostsFullResponse } from '../models';
/**
 * MediaApi - axios parameter creator
 * @export
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Get all Announcements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAnnouncements: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/announcements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all BlogPosts with full data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBlogPostsFull: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/blogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all FAQs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFAQs: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/faqs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all FinanceDictionaryEntries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinanceDictionaryEntries: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/finance-dictionary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all Legal Documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLegalDocuments: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/legal-documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all MoneyTips for given year
         * @param {number} year year for which tips will be displayed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoneyTipsForYear: async (year: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            if (year === null || year === undefined) {
                throw new RequiredError('year','Required parameter year was null or undefined when calling listMoneyTipsForYear.');
            }
            const localVarPath = `/media/money-tips/year/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all WebinarPosts with full data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebinarPostsFull: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/webinars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Get all Announcements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAnnouncements(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnouncementsResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listAnnouncements(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all BlogPosts with full data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBlogPostsFull(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogPostsFullResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listBlogPostsFull(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all FAQs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFAQs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FAQsResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listFAQs(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all FinanceDictionaryEntries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFinanceDictionaryEntries(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinanceDictionaryEntriesResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listFinanceDictionaryEntries(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all Legal Documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLegalDocuments(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegalDocumentsResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listLegalDocuments(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all MoneyTips for given year
         * @param {number} year year for which tips will be displayed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMoneyTipsForYear(year: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoneyTipsForYearResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listMoneyTipsForYear(year, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all WebinarPosts with full data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWebinarPostsFull(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarPostsFullResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listWebinarPostsFull(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Get all Announcements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAnnouncements(options?: any): AxiosPromise<AnnouncementsResponse> {
            return MediaApiFp(configuration).listAnnouncements(options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all BlogPosts with full data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBlogPostsFull(options?: any): AxiosPromise<BlogPostsFullResponse> {
            return MediaApiFp(configuration).listBlogPostsFull(options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all FAQs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFAQs(options?: any): AxiosPromise<FAQsResponse> {
            return MediaApiFp(configuration).listFAQs(options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all FinanceDictionaryEntries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinanceDictionaryEntries(options?: any): AxiosPromise<FinanceDictionaryEntriesResponse> {
            return MediaApiFp(configuration).listFinanceDictionaryEntries(options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all Legal Documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLegalDocuments(options?: any): AxiosPromise<LegalDocumentsResponse> {
            return MediaApiFp(configuration).listLegalDocuments(options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all MoneyTips for given year
         * @param {number} year year for which tips will be displayed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoneyTipsForYear(year: number, options?: any): AxiosPromise<MoneyTipsForYearResponse> {
            return MediaApiFp(configuration).listMoneyTipsForYear(year, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all WebinarPosts with full data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebinarPostsFull(options?: any): AxiosPromise<WebinarPostsFullResponse> {
            return MediaApiFp(configuration).listWebinarPostsFull(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI {
    /**
     * This can only be done by the logged in user.
     * @summary Get all Announcements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listAnnouncements(options?: any) {
        return MediaApiFp(this.configuration).listAnnouncements(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all BlogPosts with full data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listBlogPostsFull(options?: any) {
        return MediaApiFp(this.configuration).listBlogPostsFull(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all FAQs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listFAQs(options?: any) {
        return MediaApiFp(this.configuration).listFAQs(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all FinanceDictionaryEntries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listFinanceDictionaryEntries(options?: any) {
        return MediaApiFp(this.configuration).listFinanceDictionaryEntries(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all Legal Documents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listLegalDocuments(options?: any) {
        return MediaApiFp(this.configuration).listLegalDocuments(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all MoneyTips for given year
     * @param {number} year year for which tips will be displayed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listMoneyTipsForYear(year: number, options?: any) {
        return MediaApiFp(this.configuration).listMoneyTipsForYear(year, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all WebinarPosts with full data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listWebinarPostsFull(options?: any) {
        return MediaApiFp(this.configuration).listWebinarPostsFull(options).then((request) => request(this.axios, this.basePath));
    }
}
