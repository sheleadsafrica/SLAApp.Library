/* tslint:disable */
/* eslint-disable */
/**
 * She Leads Africa API
 * She Leads Africa API. Combined endpoint of all services provided.
 *
 * OpenAPI spec version: v0
 * Contact: olpie101@github.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AnnouncementsResponse } from '../models';
import { BlogPostByIdResponse } from '../models';
import { BlogPostSummariesResponse } from '../models';
import { BlogPostsFullResponse } from '../models';
import { BookmarkRequest } from '../models';
import { BookmarkedBlogPostsResponse } from '../models';
import { BookmarkedWebinarPostsResponse } from '../models';
import { CommentOnBlogRequest } from '../models';
import { CommentOnBlogResponse } from '../models';
import { CommentOnWebinarRequest } from '../models';
import { CommentOnWebinarResponse } from '../models';
import { DeleteBlogCommentResponse } from '../models';
import { DeleteWebinarCommentResponse } from '../models';
import { FAQsResponse } from '../models';
import { FinanceDictionaryEntriesResponse } from '../models';
import { LegalDocumentsResponse } from '../models';
import { LikeRequest } from '../models';
import { MoneyTipsForYearResponse } from '../models';
import { SetBlogBookmarkResponse } from '../models';
import { SetBlogLikeResponse } from '../models';
import { SetCommentLikeResponse } from '../models';
import { SetWebinarBookmarkResponse } from '../models';
import { UpdateBlogReadCountResponse } from '../models';
import { UpdateCommentOnBlogResponse } from '../models';
import { UpdateCommentOnWebinarResponse } from '../models';
import { UpdateCommentRequest } from '../models';
import { VideosOfTheWeekForYearResponse } from '../models';
import { WebinarPostByIdResponse } from '../models';
import { WebinarPostsFullResponse } from '../models';
/**
 * MediaApi - axios parameter creator
 * @export
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Delete comment on a blog post
         * @param {string} id blog comment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComment: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteComment.');
            }
            const localVarPath = `/media/blog/comment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete comment on a webinar post
         * @param {string} id webinar comment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebinarComment: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteWebinarComment.');
            }
            const localVarPath = `/media/webinar/comment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Edit comment on a blog post
         * @param {string} id blog comment id
         * @param {UpdateCommentRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editComment: async (id: string, body?: UpdateCommentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editComment.');
            }
            const localVarPath = `/media/blog/comment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Edit comment on a webinar post
         * @param {string} id webinar comment id
         * @param {UpdateCommentRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editWebinarComment: async (id: string, body?: UpdateCommentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editWebinarComment.');
            }
            const localVarPath = `/media/webinar/comment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get BlogPosts by id
         * @param {string} id blog id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogPost: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getBlogPost.');
            }
            const localVarPath = `/media/blog/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get WebinarPost by id
         * @param {string} id webinar id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebinarPost: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getWebinarPost.');
            }
            const localVarPath = `/media/webinar/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all Announcements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAnnouncements: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/announcements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all BlogPosts with full data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBlogPostsFull: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/blogs-full`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all BlogPosts summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBlogPostsSummaries: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/blogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all BlogPosts bookmarked by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookmarkedBlogPosts: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/blogs/bookmarked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all WebinarPosts bookmarked by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookmarkedWebinarPosts: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/webinars/bookmarked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all FAQs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFAQs: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/faqs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all FinanceDictionaryEntries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinanceDictionaryEntries: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/finance-dictionary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all Legal Documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLegalDocuments: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/legal-documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all MoneyTips for given year
         * @param {number} year year for which tips will be displayed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoneyTipsForYear: async (year: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            if (year === null || year === undefined) {
                throw new RequiredError('year','Required parameter year was null or undefined when calling listMoneyTipsForYear.');
            }
            const localVarPath = `/media/money-tips/year/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all Videos of the week for given year
         * @param {number} year year for which videos will be queried
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVideosOfTheWeekForYear: async (year: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            if (year === null || year === undefined) {
                throw new RequiredError('year','Required parameter year was null or undefined when calling listVideosOfTheWeekForYear.');
            }
            const localVarPath = `/media/videos-of-the-week/year/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all WebinarPosts with full data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebinarPostsFull: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/webinars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Comment on a blog post
         * @param {string} id blog id
         * @param {CommentOnBlogRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postComment: async (id: string, body?: CommentOnBlogRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postComment.');
            }
            const localVarPath = `/media/blog/{id}/comment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Comment on a webinar post
         * @param {string} id webinar id
         * @param {CommentOnWebinarRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWebinarComment: async (id: string, body?: CommentOnWebinarRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postWebinarComment.');
            }
            const localVarPath = `/media/webinar/{id}/comment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Like a blog post
         * @param {string} id blog id
         * @param {BookmarkRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBlogBookmarkStatus: async (id: string, body?: BookmarkRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setBlogBookmarkStatus.');
            }
            const localVarPath = `/media/blog/{id}/bookmark`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Like a blog post comment
         * @param {string} id comment id
         * @param {LikeRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBlogCommentLikeStatus: async (id: string, body?: LikeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setBlogCommentLikeStatus.');
            }
            const localVarPath = `/media/blog/comment/{id}/like`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Like a blog post
         * @param {string} id blog id
         * @param {LikeRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBlogLikeStatus: async (id: string, body?: LikeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setBlogLikeStatus.');
            }
            const localVarPath = `/media/blog/{id}/like`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Like a webinar post
         * @param {string} id webinar id
         * @param {BookmarkRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWebinarBookmarkStatus: async (id: string, body?: BookmarkRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setWebinarBookmarkStatus.');
            }
            const localVarPath = `/media/webinar/{id}/bookmark`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Update blog read count
         * @param {string} id blog id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBlogReadCount: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateBlogReadCount.');
            }
            const localVarPath = `/media/blog/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Delete comment on a blog post
         * @param {string} id blog comment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteComment(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteBlogCommentResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).deleteComment(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete comment on a webinar post
         * @param {string} id webinar comment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWebinarComment(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteWebinarCommentResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).deleteWebinarComment(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Edit comment on a blog post
         * @param {string} id blog comment id
         * @param {UpdateCommentRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editComment(id: string, body?: UpdateCommentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCommentOnBlogResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).editComment(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Edit comment on a webinar post
         * @param {string} id webinar comment id
         * @param {UpdateCommentRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editWebinarComment(id: string, body?: UpdateCommentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCommentOnWebinarResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).editWebinarComment(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get BlogPosts by id
         * @param {string} id blog id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlogPost(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogPostByIdResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).getBlogPost(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get WebinarPost by id
         * @param {string} id webinar id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebinarPost(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarPostByIdResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).getWebinarPost(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all Announcements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAnnouncements(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnouncementsResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listAnnouncements(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all BlogPosts with full data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBlogPostsFull(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogPostsFullResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listBlogPostsFull(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all BlogPosts summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBlogPostsSummaries(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogPostSummariesResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listBlogPostsSummaries(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all BlogPosts bookmarked by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBookmarkedBlogPosts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookmarkedBlogPostsResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listBookmarkedBlogPosts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all WebinarPosts bookmarked by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBookmarkedWebinarPosts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookmarkedWebinarPostsResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listBookmarkedWebinarPosts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all FAQs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFAQs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FAQsResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listFAQs(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all FinanceDictionaryEntries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFinanceDictionaryEntries(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinanceDictionaryEntriesResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listFinanceDictionaryEntries(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all Legal Documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLegalDocuments(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegalDocumentsResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listLegalDocuments(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all MoneyTips for given year
         * @param {number} year year for which tips will be displayed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMoneyTipsForYear(year: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoneyTipsForYearResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listMoneyTipsForYear(year, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all Videos of the week for given year
         * @param {number} year year for which videos will be queried
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVideosOfTheWeekForYear(year: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideosOfTheWeekForYearResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listVideosOfTheWeekForYear(year, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all WebinarPosts with full data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWebinarPostsFull(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarPostsFullResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).listWebinarPostsFull(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Comment on a blog post
         * @param {string} id blog id
         * @param {CommentOnBlogRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postComment(id: string, body?: CommentOnBlogRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentOnBlogResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).postComment(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Comment on a webinar post
         * @param {string} id webinar id
         * @param {CommentOnWebinarRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWebinarComment(id: string, body?: CommentOnWebinarRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentOnWebinarResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).postWebinarComment(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Like a blog post
         * @param {string} id blog id
         * @param {BookmarkRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setBlogBookmarkStatus(id: string, body?: BookmarkRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetBlogBookmarkResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).setBlogBookmarkStatus(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Like a blog post comment
         * @param {string} id comment id
         * @param {LikeRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setBlogCommentLikeStatus(id: string, body?: LikeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetCommentLikeResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).setBlogCommentLikeStatus(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Like a blog post
         * @param {string} id blog id
         * @param {LikeRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setBlogLikeStatus(id: string, body?: LikeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetBlogLikeResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).setBlogLikeStatus(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Like a webinar post
         * @param {string} id webinar id
         * @param {BookmarkRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setWebinarBookmarkStatus(id: string, body?: BookmarkRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWebinarBookmarkResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).setWebinarBookmarkStatus(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Update blog read count
         * @param {string} id blog id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBlogReadCount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBlogReadCountResponse>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).updateBlogReadCount(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Delete comment on a blog post
         * @param {string} id blog comment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComment(id: string, options?: any): AxiosPromise<DeleteBlogCommentResponse> {
            return MediaApiFp(configuration).deleteComment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete comment on a webinar post
         * @param {string} id webinar comment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebinarComment(id: string, options?: any): AxiosPromise<DeleteWebinarCommentResponse> {
            return MediaApiFp(configuration).deleteWebinarComment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Edit comment on a blog post
         * @param {string} id blog comment id
         * @param {UpdateCommentRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editComment(id: string, body?: UpdateCommentRequest, options?: any): AxiosPromise<UpdateCommentOnBlogResponse> {
            return MediaApiFp(configuration).editComment(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Edit comment on a webinar post
         * @param {string} id webinar comment id
         * @param {UpdateCommentRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editWebinarComment(id: string, body?: UpdateCommentRequest, options?: any): AxiosPromise<UpdateCommentOnWebinarResponse> {
            return MediaApiFp(configuration).editWebinarComment(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get BlogPosts by id
         * @param {string} id blog id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogPost(id: string, options?: any): AxiosPromise<BlogPostByIdResponse> {
            return MediaApiFp(configuration).getBlogPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get WebinarPost by id
         * @param {string} id webinar id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebinarPost(id: string, options?: any): AxiosPromise<WebinarPostByIdResponse> {
            return MediaApiFp(configuration).getWebinarPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all Announcements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAnnouncements(options?: any): AxiosPromise<AnnouncementsResponse> {
            return MediaApiFp(configuration).listAnnouncements(options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all BlogPosts with full data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBlogPostsFull(options?: any): AxiosPromise<BlogPostsFullResponse> {
            return MediaApiFp(configuration).listBlogPostsFull(options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all BlogPosts summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBlogPostsSummaries(options?: any): AxiosPromise<BlogPostSummariesResponse> {
            return MediaApiFp(configuration).listBlogPostsSummaries(options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all BlogPosts bookmarked by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookmarkedBlogPosts(options?: any): AxiosPromise<BookmarkedBlogPostsResponse> {
            return MediaApiFp(configuration).listBookmarkedBlogPosts(options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all WebinarPosts bookmarked by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookmarkedWebinarPosts(options?: any): AxiosPromise<BookmarkedWebinarPostsResponse> {
            return MediaApiFp(configuration).listBookmarkedWebinarPosts(options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all FAQs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFAQs(options?: any): AxiosPromise<FAQsResponse> {
            return MediaApiFp(configuration).listFAQs(options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all FinanceDictionaryEntries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinanceDictionaryEntries(options?: any): AxiosPromise<FinanceDictionaryEntriesResponse> {
            return MediaApiFp(configuration).listFinanceDictionaryEntries(options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all Legal Documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLegalDocuments(options?: any): AxiosPromise<LegalDocumentsResponse> {
            return MediaApiFp(configuration).listLegalDocuments(options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all MoneyTips for given year
         * @param {number} year year for which tips will be displayed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoneyTipsForYear(year: number, options?: any): AxiosPromise<MoneyTipsForYearResponse> {
            return MediaApiFp(configuration).listMoneyTipsForYear(year, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all Videos of the week for given year
         * @param {number} year year for which videos will be queried
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVideosOfTheWeekForYear(year: number, options?: any): AxiosPromise<VideosOfTheWeekForYearResponse> {
            return MediaApiFp(configuration).listVideosOfTheWeekForYear(year, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Get all WebinarPosts with full data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebinarPostsFull(options?: any): AxiosPromise<WebinarPostsFullResponse> {
            return MediaApiFp(configuration).listWebinarPostsFull(options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Comment on a blog post
         * @param {string} id blog id
         * @param {CommentOnBlogRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postComment(id: string, body?: CommentOnBlogRequest, options?: any): AxiosPromise<CommentOnBlogResponse> {
            return MediaApiFp(configuration).postComment(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Comment on a webinar post
         * @param {string} id webinar id
         * @param {CommentOnWebinarRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWebinarComment(id: string, body?: CommentOnWebinarRequest, options?: any): AxiosPromise<CommentOnWebinarResponse> {
            return MediaApiFp(configuration).postWebinarComment(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Like a blog post
         * @param {string} id blog id
         * @param {BookmarkRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBlogBookmarkStatus(id: string, body?: BookmarkRequest, options?: any): AxiosPromise<SetBlogBookmarkResponse> {
            return MediaApiFp(configuration).setBlogBookmarkStatus(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Like a blog post comment
         * @param {string} id comment id
         * @param {LikeRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBlogCommentLikeStatus(id: string, body?: LikeRequest, options?: any): AxiosPromise<SetCommentLikeResponse> {
            return MediaApiFp(configuration).setBlogCommentLikeStatus(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Like a blog post
         * @param {string} id blog id
         * @param {LikeRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBlogLikeStatus(id: string, body?: LikeRequest, options?: any): AxiosPromise<SetBlogLikeResponse> {
            return MediaApiFp(configuration).setBlogLikeStatus(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Like a webinar post
         * @param {string} id webinar id
         * @param {BookmarkRequest} [body] request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWebinarBookmarkStatus(id: string, body?: BookmarkRequest, options?: any): AxiosPromise<SetWebinarBookmarkResponse> {
            return MediaApiFp(configuration).setWebinarBookmarkStatus(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the logged in user.
         * @summary Update blog read count
         * @param {string} id blog id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBlogReadCount(id: string, options?: any): AxiosPromise<UpdateBlogReadCountResponse> {
            return MediaApiFp(configuration).updateBlogReadCount(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI {
    /**
     * This can only be done by the logged in user.
     * @summary Delete comment on a blog post
     * @param {string} id blog comment id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public deleteComment(id: string, options?: any) {
        return MediaApiFp(this.configuration).deleteComment(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Delete comment on a webinar post
     * @param {string} id webinar comment id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public deleteWebinarComment(id: string, options?: any) {
        return MediaApiFp(this.configuration).deleteWebinarComment(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Edit comment on a blog post
     * @param {string} id blog comment id
     * @param {UpdateCommentRequest} [body] request params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public editComment(id: string, body?: UpdateCommentRequest, options?: any) {
        return MediaApiFp(this.configuration).editComment(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Edit comment on a webinar post
     * @param {string} id webinar comment id
     * @param {UpdateCommentRequest} [body] request params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public editWebinarComment(id: string, body?: UpdateCommentRequest, options?: any) {
        return MediaApiFp(this.configuration).editWebinarComment(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get BlogPosts by id
     * @param {string} id blog id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getBlogPost(id: string, options?: any) {
        return MediaApiFp(this.configuration).getBlogPost(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get WebinarPost by id
     * @param {string} id webinar id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getWebinarPost(id: string, options?: any) {
        return MediaApiFp(this.configuration).getWebinarPost(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all Announcements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listAnnouncements(options?: any) {
        return MediaApiFp(this.configuration).listAnnouncements(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all BlogPosts with full data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listBlogPostsFull(options?: any) {
        return MediaApiFp(this.configuration).listBlogPostsFull(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all BlogPosts summaries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listBlogPostsSummaries(options?: any) {
        return MediaApiFp(this.configuration).listBlogPostsSummaries(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all BlogPosts bookmarked by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listBookmarkedBlogPosts(options?: any) {
        return MediaApiFp(this.configuration).listBookmarkedBlogPosts(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all WebinarPosts bookmarked by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listBookmarkedWebinarPosts(options?: any) {
        return MediaApiFp(this.configuration).listBookmarkedWebinarPosts(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all FAQs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listFAQs(options?: any) {
        return MediaApiFp(this.configuration).listFAQs(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all FinanceDictionaryEntries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listFinanceDictionaryEntries(options?: any) {
        return MediaApiFp(this.configuration).listFinanceDictionaryEntries(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all Legal Documents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listLegalDocuments(options?: any) {
        return MediaApiFp(this.configuration).listLegalDocuments(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all MoneyTips for given year
     * @param {number} year year for which tips will be displayed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listMoneyTipsForYear(year: number, options?: any) {
        return MediaApiFp(this.configuration).listMoneyTipsForYear(year, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all Videos of the week for given year
     * @param {number} year year for which videos will be queried
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listVideosOfTheWeekForYear(year: number, options?: any) {
        return MediaApiFp(this.configuration).listVideosOfTheWeekForYear(year, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Get all WebinarPosts with full data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public listWebinarPostsFull(options?: any) {
        return MediaApiFp(this.configuration).listWebinarPostsFull(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Comment on a blog post
     * @param {string} id blog id
     * @param {CommentOnBlogRequest} [body] request params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public postComment(id: string, body?: CommentOnBlogRequest, options?: any) {
        return MediaApiFp(this.configuration).postComment(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Comment on a webinar post
     * @param {string} id webinar id
     * @param {CommentOnWebinarRequest} [body] request params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public postWebinarComment(id: string, body?: CommentOnWebinarRequest, options?: any) {
        return MediaApiFp(this.configuration).postWebinarComment(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Like a blog post
     * @param {string} id blog id
     * @param {BookmarkRequest} [body] request params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public setBlogBookmarkStatus(id: string, body?: BookmarkRequest, options?: any) {
        return MediaApiFp(this.configuration).setBlogBookmarkStatus(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Like a blog post comment
     * @param {string} id comment id
     * @param {LikeRequest} [body] request params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public setBlogCommentLikeStatus(id: string, body?: LikeRequest, options?: any) {
        return MediaApiFp(this.configuration).setBlogCommentLikeStatus(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Like a blog post
     * @param {string} id blog id
     * @param {LikeRequest} [body] request params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public setBlogLikeStatus(id: string, body?: LikeRequest, options?: any) {
        return MediaApiFp(this.configuration).setBlogLikeStatus(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Like a webinar post
     * @param {string} id webinar id
     * @param {BookmarkRequest} [body] request params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public setWebinarBookmarkStatus(id: string, body?: BookmarkRequest, options?: any) {
        return MediaApiFp(this.configuration).setWebinarBookmarkStatus(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the logged in user.
     * @summary Update blog read count
     * @param {string} id blog id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public updateBlogReadCount(id: string, options?: any) {
        return MediaApiFp(this.configuration).updateBlogReadCount(id, options).then((request) => request(this.axios, this.basePath));
    }
}
